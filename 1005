import java.io.*;import java.util.*;
public class Main { public static void main(String[] args) throws IOException {  BufferedReader br = new BufferedReader(new InputStreamReader(System.in));  BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(System.out));
  int T = Integer.parseInt(br.readLine());  for (int test_case = 0; test_case < T; test_case++) {
   StringTokenizer st = new StringTokenizer(br.readLine().trim());   int N = Integer.parseInt(st.nextToken());   int K = Integer.parseInt(st.nextToken());
   st = new StringTokenizer(br.readLine().trim());   int D[] = new int[N + 1];   for (int i = 1; i <= N; i++) {    D[i] = Integer.parseInt(st.nextToken());   }      List<Integer>[] a = (List<Integer>[]) new List[N + 1];   for (int i = 1; i < N+ 1; i++) {    a[i] = new ArrayList<Integer>();   }   int[] ind = new int[N+1];   for (int i = 0; i < K; i++) {    st = new StringTokenizer(br.readLine().trim());    int x = Integer.parseInt(st.nextToken());    int y = Integer.parseInt(st.nextToken());    a[x].add(y);    ind[y] +=1;   }   int W = Integer.parseInt(br.readLine().trim());   Queue<Integer> q = new LinkedList<Integer>();      long[] ans = new long[N + 1];      for (int i = 1; i < N + 1; i++) {    ans[i] = Long.MAX_VALUE;    if (ind[i] == 0){     q.add(i);     ans[i] = D[i];    }   }        while ( !q.isEmpty()) {    int x = q.remove();        for (int y : a[x]) {     if (y == W){      if (ans[y] == Long.MAX_VALUE)       ans[y] = Long.MIN_VALUE;      ans[y] = Math.max(ans[y], ans[x] + D[y]);     }     else if (ans[y] == Long.MAX_VALUE)      ans[y] = ans[x] + D[y];          else      ans[y] = Math.max(ans[y], ans[x] + D[y]);     ind[y] -=1;     if (ind[y] == 0){      q.add(y);     }    }       }   if (test_case != 0)    bw.append("\n");   bw.append(ans[W] + "");     }  bw.close(); }}
